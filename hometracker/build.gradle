plugins {
    id 'com.jfrog.bintray' version '1.8.5'
    id 'maven-publish'
    id 'java-library'
}

archivesBaseName = 'hometracker-api'
sourceCompatibility = 11

module {
    moduleName = 'HomeTracker'
    authors = ['Owl-e']
    main = 'fr.owle.hometracker.HTAPI'
    mainPageName = 'ui'
    target = "${projectDir}/src/main/resources"
}

gradle.projectsEvaluated {
    buildModuleConfiguration {
        fronts.create('ui') {
            buildTask project(':hometracker-ui').tasks.build
            from = "${projectDir.parent}/hometracker-ui/dist"
            into = "${projectDir}/src/main/resources"
        }
        buildTask jar
    }
}


dependencies {
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
    compile 'commons-io:commons-io:2.8.0'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.+'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testCompile 'org.mockito:mockito-core:2.+'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        api(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['api']
    publish = true
    pkg {
        repo = 'java'
        name = project.archivesBaseName
        userOrg = 'hometracker'
        licenses  = ['Apache-2.0']
        vcsUrl = 'https://github.com/Owl-e/HomeTracker.git'
        version {
            name = project.version
            released = new Date()
        }
    }
}


task deployOnServerResource(type: Copy) {
    dependsOn 'buildModule'
    from "$buildDir/libs/"
    into "${projectDir.parent}/server/src/main/resources/api"
}

task cleanUi(type: Delete) {
    delete = "src/main/resources/hometracker-ui"
}

clean.dependsOn cleanUi


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}